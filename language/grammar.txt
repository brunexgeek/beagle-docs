! Structure
! ---------

Unit
	: Package? Import* Type+
	;

Package
	: "package" QualifiedName
	;

Import
	: "import" QualifiedName ( "." "*" | "as" Name )?
	;

Type
	: Class
	;

Class
	: Annotation* "class" QualifiedName Extends? ClassBody?
	;

Extends
	: ":" TypeReference ( "," TypeReference )*
	;

Annotation
	: "@" QualifiedName
	;

ClassBody
	: "{" Member* "}"
	;

Member
	: Variable
	: Constant
	: Method
	;

Variable
	: Annotation* "var" Name ( ":" TypeReference )? ( "=" Expression )?
	;

Constant
	: Annotation* "const" Name ( ":" TypeReference )? "=" Expression
	;

Method
	: Annotation* "def" Name ParameterList ( ":" TypeReference )? Block?
	;

ParameterList
	: "(" ")"
	: "(" Parameter ( "," Parameter )* ")"
	;

Parameter
	: ( "var" | "const" )? Name ":" TypeReference
	;

QualifiedName
	: Name ( "." Name )*
	;

TypeReference
	: QualifiedName
	;

Name
	: <UTF-16 '_', 'a'-'z', 'A'-'Z' or '0'-'9'>
	;

! Expressions
! -----------

Expression
	: Disjunction ( AssignmentOperator Expression )*
	;

Disjunction
	: Conjunction ( "or" Disjunction )*
	;

Conjunction
	: EqualityComparison ( "and" Conjunction )*
	;

EqualityComparison
	: Comparison ( EqualityOperation EqualityComparison )*
	;

Comparison
	: NamedInfix ( ComparisonOperation Comparison )*
	;

NamedInfix
	: AdditiveExpression ( InOperation AdditiveExpression )*
	: AdditiveExpression IsOperation TypeReference
	;

AdditiveExpression
	: MultiplicativeExpression ( AdditiveOperation AdditiveExpression )*
	;

MultiplicativeExpression
	: PrefixUnaryExpression ( MultiplicativeOperation MultiplicativeExpression )*
	;

PrefixUnaryExpression
	: PrefixUnaryOperation? PostfixUnaryExpression
	;

PostfixUnaryExpression
	: AtomicExpression PostfixUnaryOperation?
	;

AtomicExpression
	: "(" Expression ")"
	: LiteralConstant
	: Name
	;

LiteralConstant
	: BooleanLiteral
	: StringLiteral
	: IntegerLiteral
	: "null"
	;

BooleanLiteral
	: "true"
	: "false"
	;

StringLiteral
	: <UTF-16 string>
	;

IntegerLiteral
	: <hexadecimal, decimal, octal or binary integral number>
	;

Character
	: <UTF-16 character>
	;

MultiplicativeOperation
	: "*"
	: "/"
	: "%"
	;

AdditiveOperation
	: "+"
	: "-"
	;

InOperation
	: "in"
	: "not" "in"
	;

IsOperation
	: "is"
	: "not" "is"
	;

ComparisonOperation
	: "<"
	: ">"
	: ">="
	: "<="
	;

EqualityOperation
	: "!="
	: "=="
	;

AssignmentOperator
	: "="
	: "+="
	: "-="
	: "*="
	: "/="
	: "%="
	: "&="
	: "|="
	: ">>="
	: "<<="
	;

PrefixUnaryOperation
	: "-"
	: "+"
	: "++"
	: "--"
	: "not"
	;

PostfixUnaryOperation
	: "++"
	: "--"
	: ArrayAccess
	: MemberAccessOperation PostfixUnaryExpression
	;

MemberAccessOperation
	: "."
	;

ValueArguments
	: "(" ")"
	: "(" Argument ( "," Argument )* ")"
	;

Argument
	: ( Name "=" )? Expression
	;

ArrayAccess
	: "[" Expression ( "," Expression )* "]"
	;


! Statements
! ----------

Block
	: "{" Statement* "}"
	;

Statement
	: IfThenElse
	: Return
	: Expression
	;

IfThenElse
	: "if" Expression "then" BlockOrStatement ( "else" BlockOrStatement )?
	;

BlockOrStatement
	: Block
	: Statement
	;

Return
	: "return" Expression
	;

